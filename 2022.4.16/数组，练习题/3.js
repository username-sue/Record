// 数组去重
// var nums = [1, 1, '1', 'a', 'b', 'a', 3, 5, 3, 7];
// for(var i = 0; i < nums.length; i++){
//     var temp = nums[i];
//     for(var j = i + 1; j < nums.length; j++){
//         if(nums[j] === temp){
//             nums.splice(j , 1);
//             j--;
//         }
//     }
// }

// console.log(nums);


/**
 * 第一步，循环数组，定义一个变量，把数组下标i保存到变量里，方面后续使用；
 * 第二步，再次循环数组，循环嵌套，由于要看数组i的后面一项下标，所有这里循环要i+1；
 * 第三步，判断第一个循环体数组下标I和第二个循环体数组下标j，看里面的属性是否相等
 * 如果相等，那就把数组里面多余的属性删除，.splice(j , 1)；
 * 最后由于删除属性会改变数组的下标位置，所有这里要j--;
 */


//数组去重
/**
 * 思路；
 * 问；去重为什么要嵌套循环；
 * 答；因为第一个循环（外层）是循环数组先拿到数组的每一项属性的，
 * 拿到数值每一项之后要判断循环好的数组下标i之后的属性，有没有和数组下标i相同的属性
 * 如果有就删除
 * 所以这里就需要在次循环数组下标i之后的属性。
 */
var num = [1,2,3,4,'1,','2','a','a',5,6,5,7,8,9,9];
for(var i = 0; i < num.length;i++){
    //这里j = i + 1;是为了让它每一次循环都取数组下标i之后的一位下标。
    for(var j = i +1; j < num.length;j++){
        if(num[i] === num[j]){
            num.splice(j,1);
            j--;
        }
    }
}
console.log(num);